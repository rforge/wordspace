Changes in version 0.3-0

  - this will be the first public release with a hopefully stable basic API

Pre-release history

  - v0.1-14
    - new evaluation task: SemCorWSD

  - v0.1-13
    - Rcpp implementation of scaleMargins() further reduces memory overhead (with in-place operation for internal use)
    - as.dsm() method converts term-document and document-term matrices from tm package into DSM objects
    - added support functions for evaluation of DSMs in standard tasks (multiple choice, similarity correlation and clustering)
    - new sample data sets: tables of verb-noun cooccurrences from BNC and DESC corpora
    - new evaluation tasks: RG65, WordSim353, ESSLLI08_Nouns

  - v0.1-10: use Rcpp instead of deprecated .C() native code interface
    - for performance reasons, .C() was used with DUP=FALSE, which is no longer allowed as of R 3.1.0
    - in addition, some package tests for dsm.score(), dist.matrix() and dsm.projection() were added
    - the package now depends on Rcpp (>= 0.11.0) and R (>= 3.0.0)

  - v0.1-x: partial re-design of DSM objects and basic functions
    - handling of sparse and non-negative co-occurrence matrices has been re-thought
    - not fully compatible with v0.0 series (but basic usage should not be affected)
    
  - v0.0-25: randomized SVD available as separate function rsvd()

  - v0.0-24: OpenMP no longer activated by default
    - wordspace.openmp() to check for OpenMP support and select the number of parallel threads

  - v0.0-23: further performance improvements
    - dist.matrix() uses less memory and is considerably faster for cosine/angle distance measure
    - new function pair.distances() computes distances or neighbour ranks for a list of word pairs efficiently
    - nearest.neighbours() automatically processes a long list of lookup terms in moderately sized batches

  - v0.0-21: experimental support for OpenMP on appropriate platforms
    - n/a on Mac OS X in the default R installation (but achieves speed-up if expressly activated)
    - parallelization only used if more than 100 M operations have to be carried out (purely heuristic limit)
    - first experiments suggests that using more than 4 or 8 threads brings little benefit with enormous overhead
    - setting OMP_NUM_THREADS is strongly recommended but may also affect BLAS matrix operations (e.g. with OpenBLAS)

